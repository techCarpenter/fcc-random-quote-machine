{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["quoteList","author","quote","Quote","props","state","currentIndex","handleClick","newQuote","bind","index","Math","floor","random","length","newIndex","this","newquote","setState","Fragment","id","className","target","rel","href","encodeURIComponent","onClick","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0QAWA,IAAMA,EAAY,CAChB,CACEC,OAAQ,2BACRC,MACE,8QAEJ,CACED,OAAQ,mBACRC,MACE,4JAEJ,CACED,OAAQ,aACRC,MACE,sLAEJ,CACED,OAAQ,kBACRC,MAAO,gEAET,CACED,OAAQ,gBACRC,MACE,yFAEJ,CACED,OAAQ,mBACRC,MACE,sHAIAC,E,YACJ,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CACXJ,OAAQD,EAAU,GAAGC,OACrBC,MAAOF,EAAU,GAAGE,MACpBI,aAAc,GAEhB,EAAKC,YAAc,EAAKC,SAASC,KAAd,gBAPF,E,wEAWjB,IAAIC,EAAQC,KAAKC,MAAMD,KAAKE,SAAWb,EAAUc,QAC7CC,EACFL,IAAUM,KAAKX,MAAMC,aACjBI,EAAQ,EAAIV,EAAUc,OACpBJ,EAAQ,EACRA,EAAQ,EACVA,EACFO,EAAWjB,EAAUe,GACzBC,KAAKE,SAAS,CAAEZ,aAAcS,IAC9BC,KAAKE,SAAS,CAAEhB,MAAOe,EAASf,MAAOD,OAAQgB,EAAShB,W,+BAGhD,IAAD,OACP,OACE,kBAAC,IAAMkB,SAAP,KACE,gCAAYC,GAAG,QACb,0BAAMC,UAAU,cAAhB,KACCL,KAAKX,MAAMH,OAEd,uBAAGkB,GAAG,UAAN,IAAiBJ,KAAKX,MAAMJ,QAC5B,yBAAKoB,UAAU,aACb,yBAAKA,UAAU,oBACb,uBACED,GAAG,cACHC,UAAU,SACVC,OAAO,SACPC,IAAI,sBACJC,KACE,mFACAC,mBACE,IAAMT,KAAKX,MAAMH,MAAQ,OAASc,KAAKX,MAAMJ,SARnD,WAeF,yBAAKoB,UAAU,uBACf,uBACEA,UAAU,yBACVG,KAAK,IACLD,IAAI,sBACJH,GAAG,YACHM,QAAS,WACP,EAAKlB,aANT,oB,GAlDUmB,IAAMC,WAmEXC,EA3Gf,WACE,OACE,kBAAC,IAAMV,SAAP,KACE,kBAAC,EAAD,QCMcW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,cD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,gB","file":"static/js/main.4a328a36.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <React.Fragment>\n      <Quote />\n    </React.Fragment>\n  );\n}\n\nconst quoteList = [\n  {\n    author: \"Maximus Decimus Meridius\",\n    quote:\n      \"My name is Maximus Decimus Meridius, commander of the Armies of the North, General of the Felix Legions, loyal servant to the true emperor, Marcus Aurelius. Father to a murdered son, husband to a murdered wife. And I will have my vengeance, in this life or the next.\"\n  },\n  {\n    author: \"George S. Patton\",\n    quote:\n      \"Now I want you to remember that no bastard ever won a war by dying for his country. He won it by making the other poor dumb bastard die for his country.\"\n  },\n  {\n    author: \"John Adams\",\n    quote:\n      \"Public business, my son, must always be done by somebody. It will be done by somebody or other. If wise men decline it, others will not; if honest men refuse it, others will not.\"\n  },\n  {\n    author: \"Abraham Lincoln\",\n    quote: \"You can tell the greatness of a man by what makes him angry.\"\n  },\n  {\n    author: \"Samuel Taylor\",\n    quote:\n      \"Genius is the power of carrying the feelings of childhood into the powers of manhood.\"\n  },\n  {\n    author: \"Ernest Hemingway\",\n    quote:\n      \"There is nothing noble in being superior to your fellow man; true nobility is being superior to your former self.\"\n  }\n];\n\nclass Quote extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      author: quoteList[0].author,\n      quote: quoteList[0].quote,\n      currentIndex: 0\n    };\n    this.handleClick = this.newQuote.bind(this);\n  }\n\n  newQuote() {\n    let index = Math.floor(Math.random() * quoteList.length);\n    let newIndex =\n      index === this.state.currentIndex\n        ? index + 1 > quoteList.length\n          ? index - 1\n          : index + 1\n        : index;\n    let newquote = quoteList[newIndex];\n    this.setState({ currentIndex: newIndex });\n    this.setState({ quote: newquote.quote, author: newquote.author });\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <blockquote id=\"text\">\n          <span className=\"quotations\">\"</span>\n          {this.state.quote}\n        </blockquote>\n        <p id=\"author\">-{this.state.author}</p>\n        <div className=\"buttonBox\">\n          <div className=\"tweet-button-box\">\n            <a\n              id=\"tweet-quote\"\n              className=\"button\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n              href={\n                \"https://twitter.com/intent/tweet?hashtags=quotes,FCC,&related=freecodecamp&text=\" +\n                encodeURIComponent(\n                  '\"' + this.state.quote + '\"\\n-' + this.state.author\n                )\n              }\n            >\n              Tweet!\n            </a>\n          </div>\n          <div className=\"newquote-button-box\">\n          <a\n            className=\"button newquote-button\"\n            href=\"#\"\n            rel=\"noopener noreferrer\"\n            id=\"new-quote\"\n            onClick={() => {\n              this.newQuote();\n            }}\n          >\n            New Quote\n          </a></div>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('quote-box'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}